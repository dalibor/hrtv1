- klass = outlay.class.to_s

%ul.wrapped.last
  %table.input_table
    %thead
      %tr
        %th.title
          Implementer
          %span
            - link_to "#", :title => "Direct implementer ('service provider') for this #{klass}. i.e. your own organization or another organization that carried out this work e.g. a NGO, a Health Facility Institution, Government office, or a District.", :class => 'tooltip' do
              = image_tag "tooltip.png"
        %th
          .right_justified Past Expenditure
        %th
          .right_justified Current Budget
        %th.delete
    %tbody
      - splits = outlay.implementer_splits

      - if outlay.new_record? && splits.empty?
        - self_org_id = outlay.organization.id
        - splits.build(:organization_id => self_org_id, :data_response_id => outlay.data_response_id)

      - sort_splits(splits).each do |is|
        - f.semantic_fields_for :implementer_splits, is do |ff|
          - # a performance-friendly version of implementer_split_fields
          - # doesnt load all the big organization selects
          - styling = ""
          - styling = "error" unless ff.object.errors.empty?
          - styling += " deleting" if ff.object.marked_for_destruction?

          %tr.overflow_fix.fields{:class => styling}
            %td
              = ff.hidden_field :data_response_id, :value => @response.id
              = ff.hidden_field :updated_at, :value => Time.now
              -# the importer intentionally returns nil implementers
              -# which should fail on save
              = ff.hidden_field :organization_mask, :value => ff.object.try(:organization).try(:id)
              -# perf hack - non editable provider name
              %span.ui-autocomplete= ff.object.try(:organization).try(:name) || "< n/a >"
            %td= ff.text_field :spend, :class => 'js_spend'
            %td= ff.text_field :budget, :class => 'js_budget'
            %td= link_to_remove_fields "x", ff, {:class => 'delete_row totals_callback', :callback => 'updateTotalsValuesCallback'}

      - blank_rows.times do
        - f.object.implementer_splits.build unless f.object.implementer_splits.length > 0
        - new_object = f.object.class.reflect_on_association(:implementer_splits).klass.new
        - f.fields_for(:implementer_splits, new_object) do |builder|
          = render "shared/outlays/implementer_split_fields", :f => builder

      %tr.total
        %td
          -if show_buttons
            %span= link_to_add_fields "Add Implementer", f, :implementer_splits, "shared/outlays/", :class => "create_alt marginless"

        %td
          %p.total.js_total_spend
            %span.label.left Total
            %span.amount.right= number_with_precision(outlay.implementer_splits_total(:spend), :precision => 2)
            %span.currency.right= outlay.currency
        %td
          %p.total.js_total_budget
            %span.label.left Total
            %span.amount.right= number_with_precision(outlay.implementer_splits_total(:budget), :precision => 2)
            %span.currency.right= outlay.currency
